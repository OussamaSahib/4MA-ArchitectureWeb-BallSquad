// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}



model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstname String
  lastname  String
  photo     String? 
  phone     String  
  iban      String

  friends      Friend[] @relation("UserFriends")       // Les amis que j'ajoute
  friendOf     Friend[] @relation("IsFriendOf")        // Les gens qui m'ajoutent
  guests       Guest[] 
  
  createdMatches Match[] @relation("CreatedMatches")                                 // Les invités que j'ai créés
  matchPlayers MatchPlayer[]
}

model Match {
  id               Int      @id @default(autoincrement())
  sport            String
  date             DateTime @default(now())
  start_time       DateTime @default(now())
  end_time         DateTime @default(now())
  place            String
  field            String
  total_price      Float
  quantity_players Int

  id_creator       Int
  creator    User     @relation("CreatedMatches", fields: [id_creator], references: [id])

  matchPlayers MatchPlayer[]
  matchGuests  MatchGuest[]
}


model Friend {
  id       Int  @id @default(autoincrement())
  userId   Int
  friendId Int

  user     User @relation("UserFriends", fields: [userId], references: [id])
  friend   User @relation("IsFriendOf", fields: [friendId], references: [id])
}

model Guest {
  id        Int    @id @default(autoincrement())
  firstname String
  lastname  String?
  phone     String?
  userId    Int

  user      User   @relation(fields: [userId], references: [id])
  matchesGuest MatchGuest[]
}


model MatchPlayer {
  id        Int    @id @default(autoincrement())
  match     Match  @relation(fields: [matchId], references: [id])
  matchId   Int
  user      User   @relation(fields: [userId], references: [id])
  userId    Int
  status    MatchStatus @default(WAITING)

  @@unique([matchId, userId])
}


model MatchGuest{
  id       Int         @id @default(autoincrement())
  match    Match       @relation(fields: [matchId], references: [id])
  matchId  Int
  guest    Guest       @relation(fields: [guestId], references: [id])
  guestId  Int
  status   MatchStatus @default(NOT_ASKED)

  @@unique([matchId, guestId])
}


enum MatchStatus {
  CONFIRMED
  WAITING
  NOT_ASKED
}